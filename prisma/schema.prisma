// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}


model LinkedInAccount {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  tokens     Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}


model S3File {
  id           String   @id @default(cuid())
  username     String
  dateCreated  DateTime @default(now())
  s3Identifier String 
  active       Boolean  @default(true)  
  jobLink      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApplicationCount {
  id          String   @id @default(cuid())
  username    String
  weekOfYear  Int
  year        Int
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([username, weekOfYear, year])
}

model HealthChecks{
  id          String   @id @default(cuid())
  username    String

  isAlive     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserType {
  client
  career_coach
}
 
model User {
  id              String             @id @default(cuid())
  clerkId         String?             @unique
  email           String             @unique
  name            String?
  type            UserType           @default(client)
  linkedInAccount LinkedInAccount?
  careerCoach     CareerCoach? 
  client          Client? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CareerCoach {
  id          String    @id @default(cuid()) 
  name        String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  clients     Client[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  linkedin    String?
  notes       String?
  instanceUrl String?
  chartData   Json?     // Store as JSON
  totalJobs   Int       @default(0)
  weekJobs    Int       @default(0)
  avgJobs     Int       @default(0)
  userId     String   @unique
  user        User     @relation(fields: [userId], references: [id])
  coaches     CareerCoach[]
  processes   Process[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProcessState{
  processing
  failed
  ready
  success
}

model Process{
  id          String    @id @default(cuid())
  status      ProcessState
  clientId    String
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}